<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">

<!--
    mybatis中的动态SQL
    1.if标签
    2.where标签 会自动生成where 会解决多余的and 不会解决内容后面多余的and
    3.trim标签
        prefix,suffix：在标签中内容前面或者后面添加指定内容
        prefixOverrides suffixOverrides：在标签内容前面或者后面去掉指定内容
    4.choose when otherwise
        相当于java中的if...else if...else
        when至少设置一个 otherwise至多设置一个
    5.foreach标签  批量操作
        collection:设置要循环的数组或集合
        item：用一个字符串表示数据或者集合中的每一个数据
        separator：设置每次循环的数据之间的分隔符
        open close：循环的开始与结束
    6.sql片段
        记录一段sql，在需要用的地方用include标签引用
-->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
<!--    List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByConditionOne" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where 1=1
        <if test="empName != null and empName !=''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age !=''">
            and age = #{age}
        </if>
        <if test="gender!=null and gender !=''">
            and gender = #{gender}
        </if>
    </select>

    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp
        <where>
            <if test="empName != null and empName !=''">
                and emp_name = #{empName}
            </if>
            <if test="age != null and age !=''">
                and age = #{age}
            </if>
            <if test="gender!=null and gender !=''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName !=''">
                 emp_name = #{empName} and
            </if>
            <if test="age != null and age !=''">
                 age = #{age} and
            </if>
            <if test="gender!=null and gender !=''">
                 gender = #{gender}
            </if>
        </trim>
    </select>
<!--    List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
        <where>
            <choose>
                <when test="empName != null and empName !=''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age !=''">
                    age = #{age}
                </when>
                <when test="gender!=null and gender !=''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

<!--    void insertMoreEmp(@Param("emps")List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null ,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>
<!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteMoreEmp">
<!--        delete from t_emp where emp_id in-->
<!--        <foreach collection="empIds" item="empId" separator="," open="(" close=")">-->
<!--            #{empId}-->
<!--        </foreach>-->
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>
</mapper>